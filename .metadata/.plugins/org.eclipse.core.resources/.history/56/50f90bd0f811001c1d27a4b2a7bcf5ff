import java.util.Scanner;

class LongsubSequence
{
    // Function to find the length of the longest increasing subsequence
    public static int LIS(int[] arr, int i, int n, int prev)
    {
        // Base case: nothing is remaining
        if (i == n) {
            return 0;
        }
 
        // case 1: exclude the current element and process the
        // remaining elements
        int excl = LIS(arr, i + 1, n, prev);
 
        // case 2: include the current element if it is greater
        // than the previous element in LIS
        int incl = 0;
        if (arr[i] > prev) {
            incl = 1 + LIS(arr, i + 1, n, arr[i]);
        }
 
        // return the maximum of the above two choices
        return Integer.max(incl, excl);
    }
   
    public static void main(String args[])
    {
    	int[] arr = new int[100];
        int n;
        Scanner input = new Scanner(System.in);
        System.out.println("Enter the length of the array:");
        n=input.nextInt();
        System.out.println("Enter the array elements :");
        for(int i=0;i<n;i++){
        	arr[i]=input.nextInt();
        	
        }
        
        
        
        System.out.print("The length of the LIS is "
                + LIS(arr, 0,n, Integer.MIN_VALUE));
        input.close();
        
    }

}
